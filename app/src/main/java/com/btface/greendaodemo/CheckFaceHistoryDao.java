package com.btface.greendaodemo;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.botian.recognition.bean.CheckFaceHistory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHECK_FACE_HISTORY".
*/
public class CheckFaceHistoryDao extends AbstractDao<CheckFaceHistory, Void> {

    public static final String TABLENAME = "CHECK_FACE_HISTORY";

    /**
     * Properties of entity CheckFaceHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property UserID = new Property(2, String.class, "userID", false, "USER_ID");
        public final static Property CheckType = new Property(3, String.class, "checkType", false, "CHECK_TYPE");
        public final static Property CheckResult = new Property(4, String.class, "checkResult", false, "CHECK_RESULT");
        public final static Property Ftime = new Property(5, String.class, "ftime", false, "FTIME");
    }


    public CheckFaceHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public CheckFaceHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHECK_FACE_HISTORY\" (" + //
                "\"ID\" TEXT," + // 0: id
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"USER_ID\" TEXT," + // 2: userID
                "\"CHECK_TYPE\" TEXT," + // 3: checkType
                "\"CHECK_RESULT\" TEXT," + // 4: checkResult
                "\"FTIME\" TEXT);"); // 5: ftime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHECK_FACE_HISTORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CheckFaceHistory entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String userID = entity.getUserID();
        if (userID != null) {
            stmt.bindString(3, userID);
        }
 
        String checkType = entity.getCheckType();
        if (checkType != null) {
            stmt.bindString(4, checkType);
        }
 
        String checkResult = entity.getCheckResult();
        if (checkResult != null) {
            stmt.bindString(5, checkResult);
        }
 
        String ftime = entity.getFtime();
        if (ftime != null) {
            stmt.bindString(6, ftime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CheckFaceHistory entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String userID = entity.getUserID();
        if (userID != null) {
            stmt.bindString(3, userID);
        }
 
        String checkType = entity.getCheckType();
        if (checkType != null) {
            stmt.bindString(4, checkType);
        }
 
        String checkResult = entity.getCheckResult();
        if (checkResult != null) {
            stmt.bindString(5, checkResult);
        }
 
        String ftime = entity.getFtime();
        if (ftime != null) {
            stmt.bindString(6, ftime);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public CheckFaceHistory readEntity(Cursor cursor, int offset) {
        CheckFaceHistory entity = new CheckFaceHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // checkType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // checkResult
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // ftime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CheckFaceHistory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCheckType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCheckResult(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFtime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(CheckFaceHistory entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(CheckFaceHistory entity) {
        return null;
    }

    @Override
    public boolean hasKey(CheckFaceHistory entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
